# -*- mode: sh; -*-

ROOT=$(pwd)

alias porcelain="git status --porcelain"

### COMMANDS

## usage: _reword COMMIT
function _reword {
    git commit --fixup reword:${1:?missing COMMIT}
}

## usage: _squash COMMIT
function _squash {
    local commit="${1:?missing COMMIT}"
    git commit --squash $commit
    history -s git commit --squash $commit
}

alias _fixup='git commit --fixup; history -s git commit --fixup'
alias _gb="git branch; history -s git branch"
alias _gdiff='git difftool --dir-diff; history -s git difftool --dir-diff'
alias gitoff=__gitoff
alias _gl='git log --oneline; history -s git log --oneline'
alias _gr='git rebase --interactive --autostash --autosquash; history -s git rebase --interactive --autostash --autosquash'
alias _gs='git status; history -s git status'

if which commit > /dev/null; then
    ## usage: __temporary_input_file [INITIAL-INPUT]
    function __temporary_input_file {
	local commitfile=$(mktemp -t COMMIT-MSG-XXX)

	# Add initial input to the file
	local input="$1"
	if [ -n "$input" ]; then
	    echo "$input" > $commitfile
	fi

	# Let the user edit the file directly
	# and then remove it afterward
	emacsclient -c $commitfile &> /dev/null && {
	    cat $commitfile | head -n 1
	}
	delete -f $commitfile
    }

    ## usage: __commit-do TAG [-Can] [-c CONVENTION] FILE
    ## TAG: One of add, refactor, remove, rm, update
    function __commit-do {
	local convention dry
	local addfile=0
	local editcommit=0
	local USAGE="usage: commit-$tag [-Can] [-c CONVENTION] [--] FILE"

	local temp=$(getopt -o aCc:hn -l help -- "$@")
	eval set -- "$temp"

	while true; do
	    case "$1" in
		-a)
		    addfile=1
		    shift
		    ;;
		-C)
		    editcommit=1
		    shift
		    ;;
		-c)
		    convention="$2"
		    shift 2
		    ;;
		-h|--help)
		    echo "$USAGE"
		    return
		    ;;
		-n)
		    dry=echo
		    shift
		    ;;
		--)
		    shift
		    break
		    ;;
		*)
		    __error "Internal error"
		    return 2
	    esac
	done

	# Positional arguments
	local tag="$1"
	local file="$2"

	# Missing or incorrect args
	if [ -z "$tag" ]; then
	    __error -f __commit-do "Missing tag\n$USAGE"
	    return 1
	elif [ -z "$file" ]; then
	    __error -f __commit-do "Missing file\n$USAGE"
	    return 1
	elif [[ ! $tag =~ add|r(e(factor|move)|m)|update ]]; then
	    # Uses a regular expression to see if TAG is valid
	    __error -f __commit_do "Invalid tag '$tag', must be one of add, refactor, remove, rm, or update"
	    return 1
	fi

	# -a adds the file to the index
	if [ $addfile -ne 0 ]; then
	    __dprint "Adding $file to index..."
	    env -C $ROOT git add $file || return 1
	fi

	case $tag in
	    add)
		# Is file added to index?
		local added=$(porcelain | grep '^A ' | sed -E 's/^.. (.+)/\1/')
		if [ $addfile -eq 0 ]; then
		    if ! grep "$file" <<<"$added" &> /dev/null; then
			echo "${file@Q} not added to index"
			return 1
		    fi
		else
		    git add "$file" || {
			__error -f __commit_do "Could not add ${file@Q} to index"
			return 1
		    }
		fi

		msg="$file"
		;;
	    remove|rm)
		tag=remove
		msg="$file"
		;;
	    refactor|update)
		if [ $addfile -eq 0 ]; then
		    # good:
		    #   * " M" -- updated in working tree; not added to index
		    #   * "M " -- modified; added to index
		    if ! (porcelain | grep -E "^MM" &> /dev/null); then
			__error -f commit-$tag "Updated $file not added to index"
			return 1
		    fi
		else
		    git add "$file" || {
			__error -f __commit_do "Could not add ${file@Q} to index"
			return 1
		    }
		fi

		# -C lets the user edit the commit message
		# beforehand, whereas the default behavior
		# is to just use FILE
		if [ $editcommit -ne 0 ]; then
		    msg=$(__temporary_input_file $file)
		else
		    msg="$file"
		fi
		;;
	    *)
		__error -f __commit-do "Internal error"
		return 2
	esac

	# Both -a and -n are passed
	if [[ $addfile != 0 && -n "$dry" ]]; then
	    git reset
	fi

	${dry:-eval} commit ${convention:+-c $convention} -t $tag -m "${msg@Q}"
    }

    alias commit-add="__commit-do add"
    alias commit-refactor="__commit-do refactor"
    alias commit-rm="__commit-do rm"
    alias commit-update="__commit-do update"
fi

### HELPER FUNCTIONS

## usage: dprint MSG [MSG ...]
function __dprint {
    local msg="${1:?missing MSG}"
    shift
    if [ ${DEBUG:-0} -ne 0 ]; then
        echo "DEBUG: $msg" "$@"
    fi
}

function __gitoff {
    unalias _fixup _ga _gb _gdiff _gl _gr _gs commit-{add,refactor,rm,update} \
	    gitoff porcelain 2> /dev/null
    unset -f __commit-do __dprint __error __ga __gitoff __temporary_input_file _reword _squash _squash \
	  format-commit list-commands
    unset MODE ROOT
}

## usage: __error [-f FUNCTION] ...
function __error {
    local fn
    if [ "$1" = "-f" ]; then
	fn="$2"
	shift 2
    fi

    local msg="$1"
    shift
    echo -e "${fn:+$fn: }$msg" "$@"
}

## usage: list-commands
function list-commands {
    cat <<EOF
Gitrc Commands:
  * _fixup COMMIT
  * _reword COMMIT
  * _squash COMMIT
  * _ga FILE (deprecated)
  * _gb
  * _gl [GIT-LOG-ARGS...]
  * _grm FILE (deprecated)
  * _gs
  * gitoff
EOF
    if which commit > /dev/null; then
	cat <<EOF
Commit Commands:
  * commit-add
  * commit-refactor
  * commit-rm
  * commit-update
EOF
    fi
}

list-commands
