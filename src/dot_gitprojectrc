# -*- mode: sh; -*-

ROOT=$(pwd)

alias porcelain="git status --porcelain"

### COMMANDLINE ARGUMENTS

temp=$(getopt -o :p -l python -- "$@")
eval set -- "$temp"

while true; do
    case "$1" in
	-p|--python)
	    MODE=python
	    shift
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
    esac
done

### COMMANDS

## usage: _gc
function _gc {
    local branch
    branch=$(git branch | grep -v '^\*' | fzf)

    if [[ -n "$branch" ]]; then
	git checkout $branch
    else
        echo "No branch selected."
    fi
}

## usage: _reword COMMIT
function _reword {
    git commit --fixup reword:${1:?missing COMMIT}
}

## usage: _squash COMMIT
function _squash {
    local commit="${1:?missing COMMIT}"
    git commit --squash $commit
    history -s git commit --squash $commit
}

## usage: _fixup REVISION
function _fixup {
    local revision
    revision=${1:?missing REVISION}

    git commit --fixup "${revision:?empty}"
    history -s git commit --fixup "$revision"
}

alias _gb="git branch; history -s git branch"
alias _gdiff='git difftool --dir-diff; history -s git difftool --dir-diff'
alias gitoff=__gitoff
alias _gl='git log --oneline; history -s git log --oneline'
alias _gr='git rebase --interactive --autostash --autosquash; history -s git rebase --interactive --autostash --autosquash'
alias _gs='git status; history -s git status'

if which commit > /dev/null; then
    ## usage: __temporary_input_file [INITIAL-INPUT]
    function __temporary_input_file {
	local commitfile
	commitfile=$(mktemp -t COMMIT-MSG-XXX)

	# Add initial input to the file
	local input="$1"
	if [ -n "$input" ]; then
	    echo "$input" > $commitfile
	fi

	# Let the user edit the file directly
	# and then remove it afterward
	emacsclient -c $commitfile &> /dev/null && {
	    cat $commitfile | head -n 1
	}
	delete -f $commitfile
    }

    ## usage: __commit-do TAG [-Can] [-c CONVENTION] FILE
    ## TAG: One of add, refactor, remove, rm, update
    function __commit-do {
	local convention dry addfile editcommit ; # flags and options
	local file tag ;# positional arguments

	local usage
	usage="usage: commit-$tag [-Can] [-c CONVENTION] [--] FILE"

	tag="$1"; shift

	# flag defaults
	addfile=0
	editcommit=0

	local opt
	OPTIND=1
	while getopts :aCc:nh opt; do
	    case $opt in
		a)
		    addfile=1
		    ;;
		C)
		    editcommit=1
		    ;;
		c)
		    convention="$OPTARG"
		    ;;
		n)
		    # shellcheck disable=SC2209
		    dry=echo
		    ;;
		h)
		    echo "$usage"
		    return
		    ;;
		:)
		    __error -f commit-$tag "Missing argument for '-$OPTARG'"
		    return 1
		    ;;
		*)
		    __error -f commit-$tag "Invalid option: '-$OPTARG'"
		    return 1
	    esac
	done
	shift $(( OPTIND - 1 ))
	OPTIND=1

	# Positional arguments
	local file
	file="$1"

	# Missing or incorrect args
	if [ -z "$tag" ]; then
	    __error -f __commit-do "Internal error; Missing tag\n$usage"
	    return 1
	elif [ -z "$file" ]; then
	    __error -f commit-$tag "Missing file\n$usage"
	    return 1
	elif [[ ! $tag =~ add|r(e(factor|move)|m)|update ]]; then
	    # Uses a regular expression to see if TAG is valid
	    local temp='add, refactor, remove, rm, or update'
	    __error -f __commit-do "Internal error; Invalid tag '$tag', must be one of $temp"
	    return 1
	fi

	case $tag in
	    add)
		local status pattern
		status=$(porcelain | grep "$file")
		if test -z "$status"; then
		    __error -f commit-$tag "${file@Q} not in working tree"
		    return 1
		fi

		if [ $addfile -eq 0 ]; then
		    pattern='^(A |\?\?)'
		    if [[ ! $status =~ $status ]]; then
			__error -f commit-$tag "${file@Q} does not exist in the working tree," \
				"untracked or otherwise"
			return 1
		    fi
		else
		    # -a was provided
		    status=$(porcelain | grep "$file" 2> /dev/null)
		    case $status in
			??*)
			    # Completely untracked
			    git add "$file" || {
				__error -f commit-$tag "Could not add ${file@Q} to index"
				return 1
			    }
			    ;;
			A*)
			    echo "Already added ${file@Q} to index"
			    ;;
			*)
			    __error -f commit-$tag "Invalid status: $status"
			    return 1
		    esac
		fi

		# -C lets the user edit the commit message
		# beforehand, whereas the default behavior
		# is to just use FILE
		if [ $editcommit -ne 0 ]; then
		    msg=$(__temporary_input_file $file)
		else
		    msg="$file"
		fi

		msg="$file"
		;;
	    remove|rm)
		tag=remove
		msg="$file"
		;;
	    refactor|update)
		# good:
		#   * " M" -- updated in working tree; not added to index
		#   * "M " -- modified; added to index
		local status
		status=$(porcelain | grep "$file")
		test -n "$status" || {
		    # __error -f commit-$tag "Internal error; \$status is empty"
		    __error -f commit-$tag "${file@Q} not updated in working tree"
		    return 1
		}

		# if [[ ! $status =~ ^.M ]]; then
		#     __error -f commit-$tag "${file@Q} not updated in working tree"
		#     return 1
		# fi

		if [ $addfile -eq 0 ]; then
		    local regex
		    regex='^M '
		    if [[ ! $status =~ $regex ]]; then
			__error -f commit-$tag "${file@Q} has not been added to the index"
			return 1
		    fi
		else
		    __dprint "Adding ${file@Q}"
		    status=$(porcelain | grep "$file" 2> /dev/null)
		    pattern="^([M ])M $file"
		    if [[ $status =~ $pattern ]]; then
			if [ "${BASH_REMATCH[1]}" = " " ]; then
			    # Not added to index
			    git add "$file" || {
				__error -f commit-$tag "Could not add ${file@Q} to index"
				return 1
			    }
			else
			    # Already added to index
			    __error -f commit-$tag "${file@Q} already added to index"
			fi
		    fi
		fi

		# -C lets the user edit the commit message
		# beforehand, whereas the default behavior
		# is to just use FILE
		if [ $editcommit -ne 0 ]; then
		    msg=$(__temporary_input_file $file)
		else
		    msg="$file"
		fi
		;;
	    *)
		__error -f __commit-do "Internal error"
		return 2
	esac

	# Both -a and -n are passed
	if [[ $addfile != 0 && -n $dry ]]; then
	    git reset
	fi

	${dry:-eval} commit ${convention:+-c $convention} -t $tag -m "${msg@Q}" -ct -
    }

    ## usage: commit-add-all [-Can] [-c CONVENTION] TAG FILE...
    function commit-all {
	local opts=()
	OPTIND=1
	while getopts :Cac:n OPT; do
	    case $OPT in
		C)
		    opts+=(-C)
		    ;;
		a)
		    opts+=(-a)
		    ;;
		c)
		    opts+=(-c "$OPTARG")
		    ;;
		n)
		    opts+=(-n)
		    ;;
		*)
		    echo "usage: ${0##*/} [-Cacn} [--] TAG FILE..."
		    return 2
	    esac
	done
	shift $(( OPTIND - 1 ))
	OPTIND=1

	local tag=${1:?missing TAG}
	local file=${2:?missing FILE}
	shift 2

	local answer
	for file in "$file" "$@"; do
	    read -r -n 1 -p "\$ __commit-do $tag ${opts[*]@Q} ${file@Q} \$ [y/n] " answer
	    echo
	    if [ "$answer" = "y" ]; then
		__commit-do $tag "${opts[@]}" "$file"
	    fi
	done
    }

    if [ "$MODE" = "python" ]; then
	commit_dep_usage='commit-dep [-d] DEPENDENCY'

	## usage: commit-dep [-d] DEPENDENCY
	function commit-dep {
	    local answer D N
	    while getopts :dn OPT; do
		case $OPT in
		    d)
			D=" (dev)"
			;;
		    n)
			N=echo
			;;
		    *)
			echo "commit-dep [-d] DEPENDENCY"
			return 1
		esac
	    done
	    shift $(( OPTIND - 1 ))
	    OPTIND=1

	    local dependency=${1:?missing DEPENDENCY}

	    read -p 'Add pyproject.toml? [y/n] ' answer
	    if [ "$answer" = "y" ]; then
		git add pyproject.toml || return $?
	    fi

	    if [ -f "uv.lock" ]; then
		read -p 'Add uv.lock? [y/n] ' answer
		if [ "$answer" = "y" ]; then
		    git add uv.lock || {
			local code=$?
			git reset
			return $code
		    }
		fi
	    fi

	    if [ -f "poetry.lock" ]; then
		read -p 'Add poetry.lock? [y/n] ' answer
		if [ "$answer" = "y" ]; then
		    git add poetry.lock || {
			local code=$?
			git reset
			return $code
		    }
		fi
	    fi

	    $N commit -t project -m "Add ${dependency}$D" -ct -
	}

	commit_version_usage='commit-version VERSION'

	## usage: commit-version VERSION
	function commit-version {
	    local version
	    version="$1"
	    if [ -z "$version" ]; then
		echo "missing VERSION" >&2
		return 1
	    fi

	    $N commit -t project -m "Bump to version $version" -ct -
	}
    else
	commit_dep_usage='commit-dep DEPENDENCY'

	# Generic behavior
	## usage: commit-dep DEPENDENCY
	function commit-dep {
	    local dependency=${1:?missing DEPENDENCY}
	    commit -t project -m "Add $dependency"
	}
    fi

    ## usage: format-commit [-c]
    function format-commit {
	local tmp=$(mktemp) C=0

	while getopts :c OPT; do
	    case $OPT in
		c)
		    C=1
		    ;;
		*)
		    echo "usage: format-commit [-c]"
		    return 1
	    esac
	done
	shift $(( OPTIND - 1 ))
	OPTIND=1

	commit -n | tee $tmp
	echo "##########"
	if [ $C -eq 0 ]; then
	    sed -Enz 's/.+git commit -m "([^"]*)\n?"/\1/p' $tmp
	else
	    sed -Enz 's/.+git commit -m "([^"]*)\n?"/\1/p' $tmp | xclip -selection clipboard
	fi
	delete $tmp
    }

    alias commit-add="__commit-do add"
    alias commit-refactor="__commit-do refactor"
    alias commit-rm="__commit-do rm"
    alias commit-remove="__commit-do remove"
    alias commit-update="__commit-do update"
fi

### HELPER FUNCTIONS

## usage: dprint MSG [MSG ...]
function __dprint {
    local msg="${1:?missing MSG}"
    shift
    if [ ${DEBUG:-0} -ne 0 ]; then
        echo "DEBUG: $msg" "$@"
    fi
}

function __gitoff {
    unalias _fixup _ga _gb _gc _gdiff _gl _gr _gs commit-{add,refactor,remove,rm,update} \
	    gitoff porcelain 2> /dev/null
    unset -f __commit-do __dprint __error __gitoff __temporary_input_file _reword _squash \
	  commit-{all,dep} format-commit
    unset ROOT
}

## usage: __error [-f FUNCTION] ...
function __error {
    local fn
    if [ "$1" = "-f" ]; then
	fn="$2"
	shift 2
    fi

    local msg="$1"
    shift
    echo -e "${fn:+$fn: }$msg" "$@"
}

cat <<EOF
Gitrc Commands:
  * _fixup COMMIT
  * _reword COMMIT
  * _squash COMMIT
  * _gb
  * _gc
  * _gdiff
  * _gl [GIT-LOG-ARGS...]
  * _gs
  * gitoff
EOF

if [ -n "$commit_version_usage" ]; then
    commit_version_usage=$(printf "\n  * $commit_version_usage")
fi

if which commit > /dev/null; then
    cat <<EOF
Commit Commands:
  * commit-add [-Can] [-c CONVENTION] FILE
  * $commit_dep_usage
  * commit-refactor [-Can] [-c CONVENTION] FILE
  * commit-rm [-Can] [-c CONVENTION] FILE
  * commit-update [-Can] [-c CONVENTION] FILE${commit_version_usage}
  * format-commit [-c]
EOF
fi

unset MODE commit_dep_usage commit_version_usage

# Local Variables:
# flycheck-shellcheck-excluded-warnings: ("SC2086")
# End:
