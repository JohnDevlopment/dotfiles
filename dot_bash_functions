function _midentify {
    local infile="${1?no input file provided}"
    mplayer -identify -frames 0 -vo null -ao null "$infile" 2>&1 | sed -n 's/^ID_//p'
}

## usage: lsdirs [-qh]
function lsdirs {
    local i=0
    local opt=
    local quotes=1

    # Options
    for opt; do
	case "$opt" in
	    -q|--no-quotes)
		quotes=0
		;;
	    -h|--help)
		echo "lsdirs [-q|--no-quotes] [DIR]"
		return `true`
		;;
	    *)
		;;
	esac
	i+=1
    done
    shift $i

    local res=$(dir -1dAQ */ .*/ | sed -r -e 's_^"\.{1,2}/"__g' -e 's_/"$_"_g' | sed -z 's_\n\n__')

    if [ $quotes -eq 0 ]; then
	echo "$res" | sed 's/"//g'
    else
	echo "$res"
    fi
}

function set-title {
    if [[ -z "$ORIG" ]]; then
	ORIG=$PS1
    fi
    TITLE="\[\e]2;$*\a\]"
    PS1=${ORIG}${TITLE}
}

function randstr {
    local len=${1:?no length}
    # shellcheck disable=SC2003
    expr $len + 1 &>/dev/null || {
	echo -e "invalid length\n"
    }

    LC_ALL=C tr -dc A-Za-z0-9 </dev/urandom | head -c $len
}

## usage: __emc_view FILE
function __emc_view {
    local file="${1:?missing FILE}"
    if [[ ! -f $file ]]; then
	echo "'$file' does not exist" >&2
	return 1
    fi
    file=$(realpath "$file")
    local fbase=$(basename "$file")

    local command="(progn (require 'server-view-ext) (server-ext-view-file \"$file\"))"
    echo emacsclient -c --eval "${command@Q}"
}

function __venv {
    local cmd="source"
    if [ -d ".venv" ]; then
	echo -en "$cmd .venv/bin/activate"
	history -s $cmd .venv/bin/activate
    elif [ -d ".env" ]; then
	echo -en "$cmd .env/bin/activate"
	history -s $cmd .env/bin/activate
    else
	echo "no .venv or .env directory present" >&2
	false
    fi
}

## usage: detect_stdin
## returns: "Pipe: pipe:[<pid>]" if is pipe, "Terminal: <path>" if terminal, else "Unknown: <path>"
function detect_stdin {
    local stdin ftype

    stdin=$(ls -la /proc/self/fd/0)
    stdin="${stdin/*-> /}"

    if [[ $stdin =~ [pP]ipe.* ]]; then
	# Is a pipe
	echo "Pipe: $stdin"
    else
	# Is a terminal or something else
	ftype="$(stat --printf=%F $stdin)"
	if [ "$ftype" = 'character special file' ]; then
	    echo "Terminal: $stdin"
	else
	    echo "Unknown: $stdin"
	fi
    fi
}

## usage: subshell [-h] [-H] [-i FILE]
function subshell {
    local RM=$(which rm)

    # Usage
    local USAGE="usage: subshell [-H] [-i INPUTFILE] [-C DIR]
       subshell -h"

    # Parse options
    local OPT OPTARG OPTIND input history=1 dry=0 C
    while getopts :C:Hhi:n OPT; do
	case $OPT in
	    H)
		history=0
		;;
	    i)
		input="$OPTARG"
		;;
	    C)
		C="$OPTARG"
		;;
	    n)
		dry=1
		;;
	    h)
		echo "$USAGE"
		return
		;;
	    *)
		echo "$USAGE" >&2
		return 2
	esac
    done
    shift $(( OPTIND - 1 ))
    OPTIND=1

    # Create temp directory
    local tmpdir=$(mktemp -d)

    # Make script. This is the base script that simply
    # sets up the environment.
    local script="$tmpdir/script.sh"

    cat >$script <<EOF
. /etc/bash.bashrc
. $HOME/.bashrc
SUBSHELL_PROMPT=subshell
PS1="(\$SUBSHELL_PROMPT) \$PS1"
export PS1
EOF

    if [ -n "$C" ]; then
	if [ -d "$C" ]; then
	    echo "cd ${C@Q} || exit 1"
	else
	    echo "${C@Q} does not exist or is not a directory" >&2
	    return 1
	fi
    fi

    if [ $history -eq 0 ]; then
	# -H flag is set
	cat >> $script <<EOF
history -c
HISTFILE=/dev/null
export HISTFILE
EOF
    elif [ -f "$PWD/.bash_history" ]; then
	# History file exists
	cat >> $script <<EOF
history -c
HISTFILE="$PWD/.bash_history"
export HISTFILE
history -r
EOF
    fi

    # Detect if $input is a file
    if [ -f "$input" ]; then
	# Source file
	local temp=$(realpath $input)
	input=". \"$temp\""
	echo "$input" >> $script
    else
	# Detect if stdin is either a pipe or the terminal
	case $(detect_stdin) in
	    Pipe:*)
		while read -r line; do
		    echo "$line" >> $script
		done
		;;
	    *)
	esac
    fi

    if [ $dry -ne 0 ]; then
	# Print script
	local temp=$(cat $script)
	echo bash --rcfile $script
	echo -e "#####$script\n$temp\n#####"
	$RM -rfv "$tmpdir"
    else
	# Execute subshell
	echo $RM -rf $tmpdir | at now + 1 minute &> /dev/null
	bash --rcfile $script
    fi
}

## usage: gi LANG
function gi {
    curl -sL "https://www.toptal.com/developers/gitignore/api/$1"
}

## usage: remount_usb
function remount_usb {
    local name
    select name in backup_usb EF50-9BCA; do
	break
    done

    local chmod=${1:+}

    case $name in
	backup_usb)
	    sudo umount /media/john/$name
	    sudo mount /dev/sdc /mnt/usb
	    ;;
	EF50-9BCA)
	    sudo umount /media/john/$name
	    sudo mount -o uid=1000,gid=1000 /dev/sdc /mnt/usb
	    ;;
	*)
	    echo "Unknown name '$name'" >&2
	    return 1
    esac
}

## usage: screen-units NUM [from|to] UNIT
## examples:
##     (cm to pixels) $ screen-units 5.02 from cm
##     (pixels to cm) $ screen-units 748 to cm
## constants:
##     CM_PX_RATIO=2.54
##     PPI=96
function screen-units {
    local num="$1"
    local keyword="$2"
    local unit="$3"

    # define constants
    local CM_PX_RATIO=2.54
    local PPI=96

    # cm = (px / PPI) * 2.54

    # error if any of the arguments are empty
    if [[ -z $num || -z $keyword || -z $unit ]]; then
	local args expected
	args=$(printf "%s," "$@" | sed 's/,$//')
	expected="NUM from|to UNIT"
	echo "screen-units ERROR: missing argument; args: ($args), expected: $expected" >&2
	return 1
    fi

    # error if $num is not a valid number
    if [[ ! $num =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
	echo "screen-units ERROR: invalid number '$num'" >&2
	return 1
    elif [[ ! $keyword =~ ^(to|from)$ ]]; then
	echo "screen-units ERROR: invalid argument '$keyword', must be 'to' or 'from'" >&2
	return 1
    elif [[ ! $unit =~ ^cm$ ]]; then
	echo "screen-units ERROR: invalid unit '$unit', can be 'cm'" >&2
	return 1
    fi

    local args=($num $keyword $unit)
    case "${args[@]}" in
	*from\ cm)
	    # from cm to pixels
	    bc <<< "scale=4; $num * ($PPI / $CM_PX_RATIO)"
	    ;;
	*to\ cm)
	    # from pixels to cm
	    bc <<< "scale=4; ($num / $PPI.0) * $CM_PX_RATIO"
	    ;;
	*)
	    echo "screen-units ERROR: can only convert from cm to pixels" >&2
	    return 1
    esac
}

## usage: rm ...
function rm {
    ~/bin/.nonpath/rm "$@"
}

## usage: mpp FILE2 FILE2
##        mpp -t DIRECTORY FILE ...
function mpp {
    local cmd
    local rm=$(which rm)

    cmd=(cp -- "$1" "$2")

    local awkcmd=$(cat <<EOF
{
	count += \$NF
	if (count % 10 == 0) {
	   percent = count / total_size * 100
	   printf "%3d%% [", percent
	   for (i=0; i<=percent; i++)
	       printf "="
	   printf ">"
	   for (i=percent; i<100; i++)
	       printf " "
	   printf "]\r"
	}
}
	END { print "" }
EOF
	  )

    strace -q -ewrite "${cmd[@]}" 2>&1 |
	awk "$awkcmd" total_size=$(stat -c '%s' "$1") count=0

    $rm -v "$1"
}

## usage: apply COMMAND ARG ...
function apply {
    local command="${1:?missing COMMAND}"
    local arg="${2:?missing ARG}"
    shift 2

    for arg in "$arg" "$@"; do
	eval "$command" "$arg"
    done
}

## usage: mc-cd [MC ARGS...]
function mc-cd {
    MC_USER=$(whoami)
    MC_PWD_FILE=${TMPDIR:-/tmp}/mc-$MC_USER/mc.pwd.$$

    mc -P "$MC_PWD_FILE" "$@"

    if [ -r "$MC_PWD_FILE" ]; then
	MC_PWD=$(cat "$MC_PWD_FILE")
	if [ -n "$MC_PWD" ] && [ "$MC_PWD" != "$PWD" ] && [ -d "$MC_PWD" ]; then
	    cd "$MC_PWD" || return
	fi
    fi

    delete -f $MC_PWD_FILE
}

## usage: mv_prefix [-v] SRC DEST
function mv_prefix {
    local OPT VERBOSE
    while getopts :hv OPT; do
	case $OPT in
	    h)
		echo "usage: mv_prefix [-v] SRC DEST"
		return
		;;
	    v)
		VERBOSE="-v"
		;;
	    *)
		echo "usage: mv_prefix [-v] SRC DEST"
		return 1
	esac
    done
    shift $(( OPTIND - 1 ))
    OPTIND=1

    # Parse the arguments
    local src dest REGEX_ASTERIK_AT_BEGIN REGEX_ASTERIK_AT_END
    src="${1:?missing SRC}"
    dest="${2:?missing DEST}"
    REGEX_ASTERIK_AT_BEGIN="^\\*(.+)"
    REGEX_ASTERIK_AT_END="(.+)\\*$"

    # Canonicalize paths and separate the directory and filename
    # from each path
    local srcdir srcbase destdir destbase
    src=$(realpath -- "$src")
    srcdir=$(dirname -- "$src")
    srcbase=$(basename -- "$src")
    dest=$(realpath -- "$dest")
    destdir=$(dirname -- "$dest")
    destbase=$(basename -- "$dest")

    # If DEST is a pattern
    if [[ $destbase =~ $REGEX_ASTERIK_AT_BEGIN ]]; then
	# Append the original filename to the pattern
	dest="${destdir}/${srcbase}${BASH_REMATCH[1]}"
    elif [[ $destbase =~ $REGEX_ASTERIK_AT_END ]]; then
	# Prepend the original filename to the pattern
	dest="${destdir}/${BASH_REMATCH[1]}${srcbase}"
	echo "$dest"
    fi

    # Final command to be executed
    mv ${VERBOSE} -- "$src" "$dest"
}

## usage: cp_prefix [-v] SRC DEST
function cp_prefix {
    local OPT VERBOSE
    while getopts :hv OPT; do
	case $OPT in
	    h)
		echo "usage: cp_prefix [-v] SRC DEST"
		return
		;;
	    v)
		VERBOSE="-v"
		;;
	    *)
		echo "usage: cp_prefix [-v] SRC DEST"
		return 1
	esac
    done
    shift $(( OPTIND - 1 ))
    OPTIND=1

    # Parse the arguments
    local src dest REGEX_ASTERIK_AT_BEGIN REGEX_ASTERIK_AT_END
    src="${1:?missing SRC}"
    dest="${2:?missing DEST}"
    REGEX_ASTERIK_AT_BEGIN="^\\*(.+)"
    REGEX_ASTERIK_AT_END="(.+)\\*$"

    # Canonicalize paths and separate the directory and filename
    # from each path
    local srcdir srcbase destdir destbase
    src=$(realpath -- "$src")
    srcdir=$(dirname -- "$src")
    srcbase=$(basename -- "$src")
    dest=$(realpath -- "$dest")
    destdir=$(dirname -- "$dest")
    destbase=$(basename -- "$dest")

    # If DEST is a pattern
    if [[ $destbase =~ $REGEX_ASTERIK_AT_BEGIN ]]; then
	# Append the original filename to the pattern
	dest="${destdir}/${srcbase}${BASH_REMATCH[1]}"
    elif [[ $destbase =~ $REGEX_ASTERIK_AT_END ]]; then
	# Prepend the original filename to the pattern
	dest="${destdir}/${BASH_REMATCH[1]}${srcbase}"
	echo "$dest"
    fi

    # Final command to be executed
    cp ${VERBOSE} -- "$src" "$dest"
}

# COPY file with a progress bar
## usage: cpp [-m] FILE1 FILE2
function cpp {
    local move=0
    if [[ $1 = -m ]]; then
	move=1
	shift
    fi

    local script=$(cat <<"EOS"
{
    count += $NF
    if (count % 10 == 0) {
	percent = count / total_size * 100
	printf "%3d%% [", percent
	for (i=0;i<=percent;i++)
	    printf "="
	printf ">"
	for (i=percent;i<100;i++)
	    printf " "
	printf "]\r"
    }
}
END { print "" }
EOS
	  )

    strace -q -ewrite cp -- "${1}" "${2}" 2>&1 |
	awk "$script" total_size="$(stat -c '%s' "${1}")" count=0

    if [ $move -ne 0 ]; then
	delete -v "$1"
    fi
}

## usage: initgo
function initgo {
    local gopath
    gopath=$(env PATH="$PATH:/usr/local/go/bin" go env GOPATH)
    PATH="$PATH:/usr/local/go/bin:${gopath}/bin"
    unset -f initgo
}

## usage: nohistory
function nohistory {
    HISTFILE=/dev/null
    unset -f nohistory
}

# Local variables:
# flycheck-shellcheck-excluded-warnings: ("SC2034" "SC2086" "SC2016" "SC2155")
# mode: sh
# End:
