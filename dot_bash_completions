# -*- mode: sh; -*-

# usage: _array_range <array> <start> [<end>]
# _array_range() {
#     while getopts :Q OPT; do
# 	case $OPT in
# 	    Q|+Q)
# 		local quote=1
# 		;;
# 	    *)
# 		echo "usage: ${0##*/} [+-Q} [--] ARGS..."
# 		exit 2
# 	esac
#     done
#     shift $(( OPTIND - 1 ))
#     OPTIND=1

#     declare -n Array=${1:?provide an array name}
#     local start=${2:?provide the starting index}
#     local end=${3:--1}
#     if [ $end -lt 0 ]; then
# 	end=$(( ${#Array[@]} - 1 ))
#     fi

#     local result=()
#     for i in $(seq $start $end); do
# 	result+=("${Array[$i]}")
#     done
#     if [ ${quote:-0} -ne 0 ]; then
# 	echo "${result[@]@Q}"
#     else
# 	echo "${result[@]}"
#     fi
# }

## usage: _create_default_user_completions_function NAME [OPTION] ...
_create_default_user_completions_function() {
    local name=${1:?missing NAME}
    shift
    cat <<EOF
_${name}_completion() {
    $(cat ~/.local/etc/bash-completions/$name.sh)
}
complete $@ -F _${name}_completion $name
EOF
}

_default_user_completions() {
    local cmd=$1
    if [[ -z $cmd ]]; then
	cmd=${COMP_WORDS[0]}
	if [[ -z $cmd ]]; then
	    echo "Missing command" >&2
	    return 1
	fi
    fi

    if [ -n "$DEBUG" ]; then
	echo . ~/.local/etc/bash-completions/$cmd.sh
    else
	. ~/.local/etc/bash-completions/$cmd.sh
    fi
}

_poetry_d401cf64e39454ff_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--ansi --directory --help --no-ansi --no-cache --no-interaction --no-plugins --quiet --verbose --version"

        case "$com" in

            (about)
            opts="${opts} "
            ;;

            (add)
            opts="${opts} --allow-prereleases --dev --dry-run --editable --extras --group --lock --optional --platform --python --source"
            ;;

            (build)
            opts="${opts} --format"
            ;;

            ('cache clear')
            opts="${opts} --all"
            ;;

            ('cache list')
            opts="${opts} "
            ;;

            (check)
            opts="${opts} --lock"
            ;;

            (config)
            opts="${opts} --list --local --unset"
            ;;

            ('debug info')
            opts="${opts} "
            ;;

            ('debug resolve')
            opts="${opts} --extras --install --python --tree"
            ;;

            ('env info')
            opts="${opts} --executable --path"
            ;;

            ('env list')
            opts="${opts} --full-path"
            ;;

            ('env remove')
            opts="${opts} --all"
            ;;

            ('env use')
            opts="${opts} "
            ;;

            (export)
            opts="${opts} --all-extras --dev --extras --format --only --output --with --with-credentials --without --without-hashes --without-urls"
            ;;

            (help)
            opts="${opts} "
            ;;

            (init)
            opts="${opts} --author --dependency --description --dev-dependency --license --name --python"
            ;;

            (install)
            opts="${opts} --all-extras --compile --dry-run --extras --no-dev --no-directory --no-root --only --only-root --remove-untracked --sync --with --without"
            ;;

            (list)
            opts="${opts} "
            ;;

            (lock)
            opts="${opts} --check --no-update"
            ;;

            (new)
            opts="${opts} --name --readme --src"
            ;;

            (publish)
            opts="${opts} --build --cert --client-cert --dry-run --password --repository --skip-existing --username"
            ;;

            (remove)
            opts="${opts} --dev --dry-run --group --lock"
            ;;

            (run)
            opts="${opts} "
            ;;

            (search)
            opts="${opts} "
            ;;

            ('self add')
            opts="${opts} --allow-prereleases --dry-run --editable --extras --source"
            ;;

            ('self install')
            opts="${opts} --dry-run --sync"
            ;;

            ('self lock')
            opts="${opts} --check --no-update"
            ;;

            ('self remove')
            opts="${opts} --dry-run"
            ;;

            ('self show')
            opts="${opts} --addons --latest --outdated --tree"
            ;;

            ('self show plugins')
            opts="${opts} "
            ;;

            ('self update')
            opts="${opts} --dry-run --preview"
            ;;

            (shell)
            opts="${opts} "
            ;;

            (show)
            opts="${opts} --all --latest --no-dev --only --outdated --top-level --tree --why --with --without"
            ;;

            ('source add')
            opts="${opts} --default --priority --secondary"
            ;;

            ('source remove')
            opts="${opts} "
            ;;

            ('source show')
            opts="${opts} "
            ;;

            (update)
            opts="${opts} --dry-run --lock --no-dev --only --with --without"
            ;;

            (version)
            opts="${opts} --dry-run --next-phase --short"
            ;;

        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms="about add build 'cache clear' 'cache list' check config 'debug info' 'debug resolve' 'env info' 'env list' 'env remove' 'env use' export help init install list lock new publish remove run search 'self add' 'self install' 'self lock' 'self remove' 'self show' 'self show plugins' 'self update' shell show 'source add' 'source remove' 'source show' update version"

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

{{ if lookPath "register-python-argcomplete" -}}
{{ if lookPath "pipx" -}}
eval "$(register-python-argcomplete pipx)"
{{- end }}
{{ if lookPath "pip" -}}
eval "$(register-python-argcomplete pip)"
{{- end }}
{{ if lookPath "execnohup" }}
eval "$(_create_default_user_completions_function execnohup -o bashdefault -o default)"
{{- end }}
{{- end }}

# Poetry
complete -o default -F _poetry_d401cf64e39454ff_complete poetry
complete -o default -F _poetry_d401cf64e39454ff_complete /home/john/.local/bin/poetry

# Quilt
#complete -F _quilt_completion $_quilt_complete_opt dquilt

# Default user completions
complete -o default -o bashdefault emacs
complete -o bashdefault -o default -F _default_user_completions ffmpeg vlc
# complete -F _default_user_completions execnohup
complete -F _default_user_completions emacs-desktop

eval "$(_create_default_user_completions_function gh -o bashdefault -o default)"

if [[ "${BASH_VERSINFO[0]}" -eq 4 && "${BASH_VERSINFO[1]}" -ge 4 || "${BASH_VERSINFO[0]}" -gt 4 ]]; then
    complete -F _default_user_completions -o nosort -o bashdefault -o default atuin
else
    complete -F _default_user_completions -o bashdefault -o default atuin
fi

{{ if lookPath "jbackup" -}}
function _jbackup_completion {
    local IFS=$'
'
    COMPREPLY=( $( env COMP_WORDS="${COMP_WORDS[*]}" \
		       COMP_CWORD=$COMP_CWORD \
		       _JBACKUP_COMPLETE=complete_bash $1 ) )
    return 0
}

complete -o default -F _jbackup_completion jbackup
{{- end }}

{{ if lookPath "godot" -}}
function _godot_completion {
    local IFS=$'
'
    COMPREPLY=( $( env COMP_WORDS="${COMP_WORDS[*]}" \
		       COMP_CWORD=$COMP_CWORD \
		       _GODOT_COMPLETE=complete_bash $1 ) )
    return 0
}

complete -o default -F _godot_completion godot
{{- end }}

eval "$(chezmoi completion bash)"
