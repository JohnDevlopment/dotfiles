#!/bin/bash

declare -r BASENAME=$(basename $(realpath "$0"))

## usage: quote ARG
function quote {
    local arg="${1:?missing ARG}"
    case "$arg" in
	*\ *)
	    echo "${arg@Q}"
	    ;;
	*)
	    echo "$arg"
    esac
}

function make_options_table {
    local spec
    spec=$(cat <<EOF
    -d,:--debug:do not actually write a commit; output what will be done
    -h,:--help:print this help and exit
EOF
	)
    column -t -s : <<<"$spec"
}

USAGE=$(cat <<EOF
Usage: $BASENAME [-d] {add|remove|update} FILE
       $BASENAME -h

Options:
$(make_options_table)
EOF
     )

## usage: die MSG [CODE]
function die {
    echo -e "$BASENAME: $1" >&2
    exit ${2:-1}
}

## usage: assert EXPRESSION [MESSAGE]
function assert {
    if ! eval "$1"; then
	local prog lineno
	lineno=$(caller | awk '{ print $1; }')
	prog=$(realpath $(caller | awk '{ print $2; }'))

	echo -n "assertion failed: '$1'" >&2
	if [ -n "$2" ]; then
	    echo ", $2 ('$prog' line $lineno)" >&2
	else
	    echo " ('$prog' line $lineno)" >&2
	fi
	exit 1
    fi
}

## usage: usage full
function usage {
    local word=$1
    if [[ $word = full ]]; then
	echo "$USAGE"
    else
	echo "$USAGE" | head -n 2
    fi
}

### OPTIONS

temp=$(getopt -o dh -l debug,help -- "$@")
eval set -- "$temp"

while true; do
    case "$1" in
	--debug|-d)
	    debug=1
	    shift
	    ;;
	--help|-h)
	    usage full
	    exit
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    
    esac
done

# Accepts a single argument: either "update",
# "add" or "remove"
op="$1"

case "$op" in
    add|refactor|remove|update)
	:
	;;
    *)
	die "Unknown operation: $op\n`usage`"
esac

# Second argument is a file path
file="$2"
if [[ -z $file ]]; then
    die "Missing FILE argument\n`usage`"
fi

### CODE

# Temp file
tmpfile=$(mktemp)
trap "rm $tmpfile" EXIT

# Wish script
cat > $tmpfile <<EOF
from pathlib import Path
from tkinter import ttk
import os
import sys
import tkinter as tk

def parse_arguments():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('FILE', type=Path)
    parser.add_argument('OUTPUT', type=Path)
    return parser.parse_args()

def on_yes(path: Path, output: Path, root: tk.Tk):
    # Print the trimmed path to OUTPUT
    with open(output, 'w') as f:
        print(path.name, file=f)
    root.destroy()

def on_no(path: Path, output: Path, root: tk.Tk):
    # Print the original path to OUTPUT
    with open(output, 'w') as f:
        print(path, file=f)
    root.destroy()

def main():
    args = parse_arguments()
    path: Path = args.FILE
    output: Path = args.OUTPUT

    root = tk.Tk()
    root.title("Trim Path?")

    label = ttk.Label(root, text=f"Trim path '{path}'?")
    label.grid(row=0, column=0, columnspan=2, pady=10, padx=10)

    yes_button = ttk.Button(root, text="Yes", command=lambda: on_yes(path, output, root))
    no_button = ttk.Button(root, text="No", command=lambda: on_no(path, output, root))

    yes_button.grid(row=1, column=0, padx=5, pady=10)
    no_button.grid(row=1, column=1, padx=5, pady=10)

    root.mainloop()

if __name__ == '__main__':
    main()
EOF

# Use zenity to ask if the file path should be trimmed to
# the last path component; however, skip this step if the
# path is already a single component.
if [[ "$file" == *"/"* ]]; then
    python $tmpfile "$file" "$tmpfile"
    file=$(cat $tmpfile)
    test -z "$file" && die "Aborted by user"
fi

# If commiter.yml exists in the git working tree, then call
# `commit -t $op -m "$file"` on it, otherwise call
# `git commit`, where the message is "$op $file" with $op having
# its first character uppercased.
if git ls-files --error-unmatch commiter.yml > /dev/null; then
    if [ ${debug:=0} -eq 1 ]; then
	echo commit -t $(quote "$op") -m $(quote "$file") -ct -
    else
	commit -t "$op" -m "$file" -ct - || {
	    # Copy the formatted message to clipboard
	    echo commit -n -t $(quote "$op") -m $(quote "$file") -ct - | xclip -selection clipboard
	    exit 1
	}
    fi
else
    if [ ${debug:=0} -eq 1 ]; then
	echo git commit -m "'${op^} $file'"
    else
	git commit -m "${op^} $file" || {
	    # Copy the message to clipboard
	    echo "${op^} $file" | xclip -selection clipboard
	    exit 1
	}
    fi
fi
