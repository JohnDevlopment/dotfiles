{{- prompt("interp", "Python interpreter %d: ", default="python") -}}
{{- prompt("posargs", "Positional arguments? %y ", type_="bool") -}}
{{- prompt("usage.argv0", "Argv0 %d: ", default="source $0") -}}
{% if get("posargs") %}
  {% set argv0 = get("usage.argv0") %}
{# submode sh #}
port="$1"
if [ -z "$port" ]; then
    echo -e "Missing port\nusage: {{ argv0 }} PORT" >&2
	return 1
fi
{# endsubmode #}
{% else %}
{# submode sh #}
temp=$(getopt -o h,p: -l help,port: -- "$@")
eval set -- "$temp"

while [ "$1" != "--" ]; do
    case "$1" in
		-h|--help)
			echo "usage: {{ argv0 }} [-h] [-p|--port PORT]" >&2
			return
			;;
		-p|--port)
			port="$2"
			shift 2
			;;
		--)
			shift
			;;
		*)
	esac
done
{# endsubmode #}
{% endif %}

{# submode sh #}
if [ -z "$port" ]; then
    echo "No port specified" >&2
	return 1
fi

## usage: run [-q]
function run {
	local Q
	Q=0
    while getopts :hq OPT; do
		case $OPT in
			h)
				echo "run [-q]"
				return
				;;
			q)
				Q=1
				;;
			*)
				echo "run [-q]"
				return 2
		esac
	done
	shift $(( OPTIND - 1 ))
	OPTIND=1

	if [ $Q -ne 0 ]; then
		(sleep 2; xdg-open "http://localhost:$port/README.md") &
		exec {{ get("interp") }} -m http.server $port || {
			echo "Invalid port $port" >&2
			return 1
		}
	else
		(sleep 2; xdg-open "http://localhost:$port/README.md") &
		{{ get("interp") }} -m http.server $port || {
			echo "Invalid port $port" >&2
			return 1
		}
	fi
}
{# endsubmode #}
